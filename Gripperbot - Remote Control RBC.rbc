<?xml version="1.0" encoding="UTF-8"?>
<RBCVersion>1.0.0</RBCVersion>
<Platform>TETRIX</Platform>
<CortexDLMethod></CortexDLMethod>
<CircuitBoard></CircuitBoard>
<MenuLevel>Basic</MenuLevel>
<CompilerMode>VirtualWorlds</CompilerMode>
<CompileAndDownload>Yes</CompileAndDownload>
<VirtualWorldIndex>8</VirtualWorldIndex>
<SourceFileName>Gripperbot - Remote Control.c</SourceFileName>
<RVWParameters>gripperbot_ir sp1 autoloadgame</RVWParameters>
<SourceCode>#pragma config(Hubs,  S1, HTMotor,  HTMotor,  none,     none)
#pragma config(Sensor, S1,     ,               sensorI2CMuxController)
#pragma config(Sensor, S2,     IRSeeker,       sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S3,     light,          sensorLightActive)
#pragma config(Sensor, S4,     sonar,          sensorSONAR)
#pragma config(Motor,  motorA,          gripperMotor,  tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     rightMotor,    tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C1_2,     leftMotor,     tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C2_1,     armMotor,      tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     spinnerMotor,  tmotorTetrix, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*+++++++++++++++++++++++++++++++++++++++++++++| Notes |++++++++++++++++++++++++++++++++++++++++++++++
Gripperbot - Remote Control
- NOTE: Gripperbot can be used to pick up game objects from the floor and to raise the flag.
- This program allows you to remotely control your robot using the USB Logitech Joysticks.
- This program also ignores low values that would cause your robot to move when the joysticks fail to
return back to exact center.  You may need to adjust the 'threshold' value to get it just right.

Robot Model(s): TETRIX Gripperbot (IR) (Virtual Worlds)

[I/O Port]          [Name]              [Type]                [Description]
Motor Port A        gripperMotor        NXT Motor             Gripper motor
Motor Port D        rightMotor          TETRIX Motor          Right side motor
Motor Port E				leftMotor						TETRIX Motor					Left side motor
Motor Port F 				armMotor						TETRIX Motor					Arm motor
Motor Port G 				spinnerMotor				TETRIX Motor 					Spinner motor

Sensor Port 2				IRSeeker						IRSeeker 1200					HiTechnic IRSeeker 1200
Sensor Port 3				light   						Light Sensor					NXT Light Sensor (Active)
Sensor Port 4				sonar 							Sonar Sensor					NXT Sonar Sensor
----------------------------------------------------------------------------------------------------*/

#pragma debuggerWindows("joystickSimple");
#include "JoystickDriver.c"

task main()
{
	//Integer variable that allows you to specify a "deadzone" where values (both positive or negative)
	//less than the threshold will be ignored.
	int threshold = 10;

	//Loop Forever
	while(1 == 1)
	{
		//Get the Latest joystick values
		getJoystickSettings(joystick);

		//Driving Control
		if(abs(joystick.joy1_y2) > threshold)     // If the right analog stick's Y-axis readings are either above or below the threshold...
		{
			motor[rightMotor] = joystick.joy1_y2;				// ...move the right side of the robot.
		}
		else                                      // Else the readings are within the threshold, so...
		{
			motor[rightMotor] = 0;											// ...stop the right side of the robot.
		}
		if(abs(joystick.joy1_y1) > threshold)     // If the left analog stick's Y-axis readings are either above or below the threshold...
		{
			motor[leftMotor] = joystick.joy1_y1;				// ...move the left side of the robot.
		}
		else                                      // Else the readings are within the threshold, so...
		{
			motor[leftMotor] = 0;											// ...stop the left side of the robot.
		}

		//Arm Motor Control
		if(joy1Btn(6) == 1)       // If button 6 (RB) is pressed...
		{
			motor[armMotor] = 35;     // ...raise the arm.
		}
		else if(joy1Btn(8) == 1)  // Else, if button 8 (RT) is pressed...
		{
			motor[armMotor] = -35;    // ...lower the arm.
		}
		else                      // Else (neither button is pressed)...
		{
			motor[armMotor] = 0;      // ...stop the arm.
		}

		//Gripper Motor Control
		if(joy1Btn(5) == 1)       // If button 5 (LB)is pressed...
		{
			motor[gripperMotor] = 50;     // ...close the gripper.
		}
		else if(joy1Btn(7) == 1)  // Else, if button 7 (LT) is pressed...
		{
			motor[gripperMotor] = -50;    // ...open the gripper.
		}
		else                      // Else (neither button is pressed)...
		{
			motor[gripperMotor] = 0;      // ...stop the gripper.
		}

		//Spinner Motor Control
		if(joy1Btn(4) == 1)       // If button 4 (Y) is pressed...
		{
			motor[spinnerMotor] = -75;     //...raise the flag up with the spinner.
		}
		else if(joy1Btn(2) == 1)  // Else, if button 2 (A) is pressed...
		{
			motor[spinnerMotor] = 75;    // ...lower the flag with the spinner.
		}
		else                      // Else (neither button is pressed)...
		{
			motor[spinnerMotor] = 0;      // ...stop rotating the spinner.
		}

	}
}
</SourceCode>