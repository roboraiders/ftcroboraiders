<?xml version="1.0" encoding="UTF-8"?>
<RBCVersion>1.0.0</RBCVersion>
<Platform>TETRIX</Platform>
<CortexDLMethod></CortexDLMethod>
<CircuitBoard></CircuitBoard>
<MenuLevel>Basic</MenuLevel>
<CompilerMode>VirtualWorlds</CompilerMode>
<CompileAndDownload>Yes</CompileAndDownload>
<VirtualWorldIndex>8</VirtualWorldIndex>
<SourceFileName>Scissorbot - Remote Control.c</SourceFileName>
<RVWParameters>scissorbot_ir sp1 autoloadgame</RVWParameters>
<SourceCode>#pragma config(Hubs,  S1, HTMotor,  HTMotor,  HTMotor,  none)
#pragma config(Sensor, S2,     IRSeeker,       sensorHiTechnicIRSeeker1200)
#pragma config(Sensor, S3,     lightSensor,    sensorLightActive)
#pragma config(Sensor, S4,     sonarSensor,    sensorSONAR)
#pragma config(Motor,  motorA,          gripperMotor,  tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  motorB,          wristMotor,    tmotorNXT, PIDControl, encoder)
#pragma config(Motor,  mtr_S1_C1_1,     frontRightMotor, tmotorTetrix, openLoop)
#pragma config(Motor,  mtr_S1_C1_2,     frontLeftMotor, tmotorTetrix, openLoop, reversed)
#pragma config(Motor,  mtr_S1_C2_1,     rearRightMotor, tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C2_2,     rearLeftMotor, tmotorTetrix, openLoop, reversed, encoder)
#pragma config(Motor,  mtr_S1_C3_1,     rightScissorMotor, tmotorTetrix, openLoop, encoder)
#pragma config(Motor,  mtr_S1_C3_2,     leftScissorMotor, tmotorTetrix, openLoop, encoder)
//*!!Code automatically generated by 'ROBOTC' configuration wizard               !!*//

/*+++++++++++++++++++++++++++++++++++++++++++++| Notes |++++++++++++++++++++++++++++++++++++++++++++++
Scissorbot - Remote Control
- NOTE: Scissorbot can be used to pick object up off of the ground and to hang from the bar.
- This program allows you to remotely control your robot using the USB Logitech Joysticks.
- This program also ignores low values that would cause your robot to move when the joysticks fail to
return back to exact center.  You may need to adjust the 'threshold' value to get it just right.

Robot Model(s): TETRIX Scissorbot (Virtual Worlds)
[I/O Port]          [Name]              [Type]                [Description]
Motor Port A 				gripperMotor				NXT Motor 						NXT Gripper Motor
Motor Port B				wristMotor					NXT Motor 						NXT Wrist Motor
Motor Port D        frontRightMotor     TETRIX Motor          Front Right side motor
Motor Port E				frontLeftMotor			TETRIX Motor					Front Left side motor
Motor Port F        rearRightMotor      TETRIX Motor          Rear Right side motor
Motor Port G				rearLeftMotor				TETRIX Motor					Rear Left side motor
Motor Port H 				rightScissorMotor		TETRIX Motor					Right Scissor Lift motor
Motor Port I 				leftScissorMotor		TETRIX Motor 					Left Scissor Lift motor

Sensor Port 2				IRSeeker						HiTechnic IR Seeker		HiTechnic IR Seeker
Sensor Port 3				lightSensor  				Light Sensor					NXT Light Sensor (Active)
Sensor Port 4				sonarSensor 				Sonar Sensor					NXT Sonar Sensor
----------------------------------------------------------------------------------------------------*/

#pragma debuggerWindows("joystickSimple");
#include "JoystickDriver.c"

task main()
{
	//Integer variable that allows you to specify a "deadzone" where values (both positive or negative)
	//less than the threshold will be ignored.
	int threshold = 10;

	//Loop Forever
	while(1 == 1)
	{
		//Get the Latest joystick values
		getJoystickSettings(joystick);

		//Driving Control
		if(abs(joystick.joy1_y2) > threshold)     // If the right analog stick's Y-axis readings are either above or below the threshold...
		{
			motor[frontRightMotor] = joystick.joy1_y2;				// ...move the right side of the robot.
			motor[rearRightMotor] = joystick.joy1_y2;
		}
		else                                      // Else the readings are within the threshold, so...
		{
			motor[frontRightMotor] = 0;											// ...stop the right side of the robot.
			motor[rearRightMotor] = 0;
		}
		if(abs(joystick.joy1_y1) > threshold)     // If the left analog stick's Y-axis readings are either above or below the threshold...
		{
			motor[frontLeftMotor] = joystick.joy1_y1;				// ...move the left side of the robot.
			motor[rearLeftMotor] = joystick.joy1_y1;
		}
		else                                      // Else the readings are within the threshold, so...
		{
			motor[frontLeftMotor] = 0;											// ...stop the left side of the robot.
			motor[rearLeftMotor] = 0;
		}

		//Scissor Lift Control
		if(joy1Btn(6) == 1)       // If button 6 (RB) is pressed...
		{
			motor[rightScissorMotor] = 70;     // ...raise the scissor lift.
			motor[leftScissorMotor] = 70;
		}
		else if(joy1Btn(8) == 1)  // Else, if button 8 (RT) is pressed...
		{
			motor[rightScissorMotor] = -70;    // ...lower the scissor lift.
			motor[leftScissorMotor] = -70;
		}
		else                      // Else (neither button is pressed)...
		{
			motor[rightScissorMotor] = 0;      // ...stop the scissor lift.
			motor[leftScissorMotor] = 0;
		}

		//Wrist Motor Control
		if(joy1Btn(5) == 1)       // If button 5 (LB) is pressed...
		{
			motor[wristMotor] = 75;     //...rotate the gripper up.
		}
		else if(joy1Btn(7) == 1)  // Else, if button 7 (LT) is pressed...
		{
			motor[wristMotor] = -75;    // ...rotate the gripper down.
		}
		else                      // Else (neither button is pressed)...
		{
			motor[wristMotor] = 0;      // ...stop rotating the gripper.
		}

		//Gripper Motor Control
		if(joy1Btn(1) == 1)       // If button 1 (X) is pressed...
		{
			motor[gripperMotor] = -50;     // ...open the gripper.
		}
		else if(joy1Btn(2) == 1)  // Else, if button 2 (A) is pressed...
		{
			motor[gripperMotor] = 50;    // ...close the gripper.
		}
		else                      // Else (neither button is pressed)...
		{
			motor[gripperMotor] = 0;      // ...stop the gripper.
		}

	}
}
</SourceCode>